<!-- SPDX-License-Identifier: 0BSD -->

<Project>
    <PropertyGroup>
        <_CommandFragmentsPath>$(IntermediateOutputPath)cdb</_CommandFragmentsPath>
    </PropertyGroup>

    <!--
    The inputs here are very important: Because generating compile_commands.json
    is a fairly expensive operation (see the comment about the Zig cache below),
    we only want to do so when the set of source files has actually changed.
    Fortunately, MSBuild's _GenerateCompileDependencyCache target has us covered
    by generating a file containing a hash of all Compile items. This file is
    only written when the resulting hash is different, so we can use it as an
    input here.
    -->
    <Target Name="_CheckCompileCommands"
            Inputs="$(MSBuildAllProjects); $(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache"
            Outputs="$(CommandsPath)"
            Condition="'$(Language)' != 'Zig' and '$(EditorSupport)' == 'true'">
        <!--
        The property is set in this way, rather than in a PropertyGroup, to
        avoid MSBuild's output inference causing it to always be set.
        -->
        <CreateProperty Value="true">
            <Output TaskParameter="ValueSetByTask"
                    PropertyName="_RefreshCompileCommands" />
        </CreateProperty>
    </Target>

    <Target Name="_PrepareCompileCommands"
            Condition="'$(_RefreshCompileCommands)' == 'true'">
        <RemoveDir Directories="$(_CommandFragmentsPath)"
                   Condition="Exists('$(_CommandFragmentsPath)')" />
        <MakeDir Directories="$(_CommandFragmentsPath)" />

        <!--
        The Zig compiler will not emit a new compilation database fragment for a
        given source file if it has not actually changed. This unfortunately
        means that we have to clean the entire Zig cache when we need to refresh
        compile_commands.json. Fun.
        -->
        <RemoveDir Directories="$(CachePath)"
                   Condition="Exists('$(CachePath)')" />
    </Target>

    <!--
    This hacktastic task is necessary to work around MSBuild transforming slash
    characters on Unix systems. This breaks the JSON, rendering the generated
    compile_commands.json unusable.
    -->
    <UsingTask TaskName="ZigGenerateCompileCommands"
               TaskFactory="RoslynCodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)/Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Fragments ParameterType="Microsoft.Build.Framework.ITaskItem[]"
                       Required="true" />
            <CommandsPath ParameterType="System.String"
                          Required="true" />
        </ParameterGroup>

        <Task>
            <Code Type="Fragment"
                  Language="cs">
                <![CDATA[
                    var sb = new StringBuilder();

                    _ = sb.AppendLine("[");

                    for (var i = 0; i < Fragments.Length; i++)
                    {
                        _ = sb.AppendFormat(
                            "  {0}", File.ReadAllText(Fragments[i].GetMetadata("FullPath")).Trim().TrimEnd(','));

                        if (i != Fragments.Length - 1)
                            _ = sb.Append(',');

                        _ = sb.AppendLine();
                    }

                    _ = sb.AppendLine("]");

                    File.WriteAllText(CommandsPath, sb.ToString());
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    Read in all the compilation database fragments, remove the trailing comma
    from each, join them into a valid JSON array, and finally write the
    compile_commands.json file.
    -->
    <Target Name="_GatherCompileCommands"
            Condition="'$(_RefreshCompileCommands)' == 'true'">
        <ItemGroup>
            <_CdbFragments Include="$(_CommandFragmentsPath)/*.json" />
        </ItemGroup>

        <ZigGenerateCompileCommands Fragments="@(_CdbFragments)"
                                    CommandsPath="$(CommandsPath)" />
    </Target>
</Project>
